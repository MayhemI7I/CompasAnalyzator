package gui

import (
	"fmt"
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

// AppState —Ö—Ä–∞–Ω–∏—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type AppState struct {
	DataDir      string
	SuccessDir   string
	FailureDir   string
	CurrentLog   string
	Results      []CompassResult
	IsProcessing bool
}

// CompassResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞—Å–∞
type CompassResult struct {
	Name       string
	Status     string // "–£—Å–ø–µ—à–Ω–æ" / "–ë—Ä–∞–∫"
	TurnsCount int
	LogPath    string
}

// MainWindow –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type MainWindow struct {
	app    fyne.App
	window fyne.Window
	state  *AppState

	// –í–∫–ª–∞–¥–∫–∏
	analysisTab *AnalysisTab
	logsTab     *LogsTab
	editorTab   *EditorTab
	reportsTab  *ReportsTab
	settingsTab *SettingsTab
}

// NewMainWindow —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
func NewMainWindow() *MainWindow {
	myApp := app.NewWithID("com.ulyanov.compass-analyzer")
	myApp.SetIcon(theme.ComputerIcon())

	window := myApp.NewWindow("Compass Analyzer v2.0 - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞—Å–æ–≤")
	window.Resize(fyne.NewSize(1200, 800))
	window.CenterOnScreen()

	state := &AppState{
		Results: make([]CompassResult, 0),
	}

	mw := &MainWindow{
		app:    myApp,
		window: window,
		state:  state,
	}

	// –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
	mw.analysisTab = NewAnalysisTab(mw)
	mw.logsTab = NewLogsTab(mw)
	mw.editorTab = NewEditorTab(mw)
	mw.reportsTab = NewReportsTab(mw)
	mw.settingsTab = NewSettingsTab(mw)

	// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	mw.setupUI()

	return mw
}

// setupUI —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func (mw *MainWindow) setupUI() {
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
	header := mw.createHeader()

	// –í–∫–ª–∞–¥–∫–∏
	tabs := container.NewAppTabs(
		container.NewTabItemWithIcon("–ê–Ω–∞–ª–∏–∑", theme.SearchIcon(), mw.analysisTab.Content()),
		container.NewTabItemWithIcon("–õ–æ–≥–∏", theme.DocumentIcon(), mw.logsTab.Content()),
		container.NewTabItemWithIcon("–†–µ–¥–∞–∫—Ç–æ—Ä", theme.ContentCutIcon(), mw.editorTab.Content()),
		container.NewTabItemWithIcon("–û—Ç—á–µ—Ç—ã", theme.InfoIcon(), mw.reportsTab.Content()),
		container.NewTabItemWithIcon("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", theme.SettingsIcon(), mw.settingsTab.Content()),
	)

	tabs.SetTabLocation(container.TabLocationLeading)

	// –§—É—Ç–µ—Ä —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
	footer := mw.createFooter()

	// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	content := container.NewBorder(
		header, // top
		footer, // bottom
		nil,    // left
		nil,    // right
		tabs,   // center
	)

	mw.window.SetContent(content)
}

// createHeader —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (mw *MainWindow) createHeader() *fyne.Container {
	// –õ–æ–≥–æ—Ç–∏–ø
	logo := canvas.NewText("üß≠ Compass Analyzer", color.RGBA{R: 99, G: 102, B: 241, A: 255})
	logo.TextSize = 24
	logo.TextStyle = fyne.TextStyle{Bold: true}

	// –í–µ—Ä—Å–∏—è
	version := widget.NewLabel("v2.0 Neural Edition")

	// –ê–≤—Ç–æ—Ä
	author := widget.NewLabel("¬© –£–ª—å—è–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –Æ—Ä—å–µ–≤–∏—á | –†–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫ 3-–≥–æ —Ä–∞–∑—Ä—è–¥–∞")

	leftBox := container.NewVBox(
		logo,
		version,
	)

	// –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	quickButtons := container.NewHBox(
		widget.NewButtonWithIcon("–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", theme.FolderOpenIcon(), func() {
			mw.analysisTab.SelectDirectory()
		}),
		widget.NewButtonWithIcon("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", theme.MediaPlayIcon(), func() {
			mw.analysisTab.StartAnalysis()
		}),
		widget.NewButtonWithIcon("–≠–∫—Å–ø–æ—Ä—Ç", theme.DocumentSaveIcon(), func() {
			mw.reportsTab.ExportReport()
		}),
	)

	header := container.NewBorder(
		nil,
		nil,
		leftBox,
		quickButtons,
		author,
	)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
	separator := canvas.NewLine(color.RGBA{R: 128, G: 128, B: 128, A: 128})
	separator.StrokeWidth = 1

	return container.NewVBox(
		container.NewPadded(header),
		separator,
	)
}

// createFooter —Å–æ–∑–¥–∞–µ—Ç —Ñ—É—Ç–µ—Ä —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
func (mw *MainWindow) createFooter() *fyne.Container {
	statusLabel := widget.NewLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
	statusLabel.Importance = widget.LowImportance

	progressBar := widget.NewProgressBar()
	progressBar.Hide()

	separator := canvas.NewLine(color.RGBA{R: 128, G: 128, B: 128, A: 128})
	separator.StrokeWidth = 1

	footer := container.NewVBox(
		separator,
		container.NewPadded(
			container.NewBorder(
				nil,
				nil,
				statusLabel,
				nil,
				progressBar,
			),
		),
	)

	return footer
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (mw *MainWindow) Run() {
	mw.window.ShowAndRun()
}

// UpdateStatus –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
func (mw *MainWindow) UpdateStatus(message string) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
	fmt.Println("Status:", message)
}

// ShowProgress –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
func (mw *MainWindow) ShowProgress(show bool) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
}

// CreateDesktopApp —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func CreateDesktopApp() {
	mainWindow := NewMainWindow()
	mainWindow.Run()
}

// AppendLog –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
func (mw *MainWindow) AppendLog(message string) {
	mw.state.CurrentLog += message + "\n"
	mw.logsTab.UpdateLog(mw.state.CurrentLog)
}

// ClearLog –æ—á–∏—â–∞–µ—Ç –ª–æ–≥
func (mw *MainWindow) ClearLog() {
	mw.state.CurrentLog = ""
	mw.logsTab.UpdateLog("")
}
