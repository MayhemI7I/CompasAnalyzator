package desktop

import (
	"context"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"runtime"

	"compass_analyzer/analyzer"
	"compass_analyzer/parser"
	
	wailsruntime "github.com/wailsapp/wails/v2/pkg/runtime"
)

// App —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
type App struct {
	ctx context.Context
}

// NewApp —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä
func NewApp() *App {
	return &App{}
}

// Startup –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
func (a *App) Startup(ctx context.Context) {
	a.ctx = ctx
	fmt.Println("üñ•Ô∏è Compass Analyzer Desktop –∑–∞–ø—É—â–µ–Ω!")
}

// AnalysisResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
type AnalysisResponse struct {
	Success    bool          `json:"success"`
	IsValid    bool          `json:"isValid"`
	Compass    string        `json:"compass"`
	DeviceType string        `json:"deviceType"` // –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	Turns      []TurnInfo    `json:"turns"`
	AllAngles  []float64     `json:"allAngles"`
	Segments   []SegmentInfo `json:"segments"`
	Errors     []string      `json:"errors,omitempty"`
	Log        string        `json:"log,omitempty"`
}

// TurnInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤–æ—Ä–æ—Ç–µ
type TurnInfo struct {
	StartAngle  float64 `json:"startAngle"`
	EndAngle    float64 `json:"endAngle"`
	Diff        float64 `json:"diff"`
	SignedDiff  float64 `json:"signedDiff"`
	IsClockwise bool    `json:"isClockwise"`
	StartIndex  int     `json:"startIndex"`
	EndIndex    int     `json:"endIndex"`
}

// SegmentInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–≥–º–µ–Ω—Ç–µ
type SegmentInfo struct {
	StartIndex int     `json:"startIndex"`
	EndIndex   int     `json:"endIndex"`
	AvgAngle   float64 `json:"avgAngle"`
	Length     int     `json:"length"`
}

// AnalyzeCompass –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–∞—Å
func (a *App) AnalyzeCompass(folderPath string, config analyzer.AnalysisConfig, deviceType string) AnalysisResponse {
	response := AnalysisResponse{
		Compass:    filepath.Base(folderPath),
		DeviceType: deviceType,
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º CSV
	csvPath := filepath.Join(folderPath, "SB_CMPS.csv")
	if _, err := os.Stat(csvPath); os.IsNotExist(err) {
		response.Success = false
		response.Errors = []string{fmt.Sprintf("–§–∞–π–ª SB_CMPS.csv –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", csvPath)}
		return response
	}

	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	data, err := parser.ReadCSVFile(csvPath)
	if err != nil {
		response.Success = false
		response.Errors = []string{fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: %v", err)}
		return response
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≥–ª—ã
	angles := make([]float64, len(data))
	for i, d := range data {
		angles[i] = d.Angle
	}
	response.AllAngles = angles

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
	logFile, err := os.CreateTemp("", "compass_log_*.txt")
	if err != nil {
		logFile = nil
	}
	defer func() {
		if logFile != nil {
			logFile.Close()
			os.Remove(logFile.Name())
		}
	}()

	// –ê–Ω–∞–ª–∏–∑
	isValid, turns := analyzer.AnalyzeCompassData(angles, config, logFile)

	response.Success = true
	response.IsValid = isValid

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º turns
	for _, turn := range turns {
		response.Turns = append(response.Turns, TurnInfo{
			StartAngle:  turn.StartAngle,
			EndAngle:    turn.EndAngle,
			Diff:        turn.Diff,
			SignedDiff:  turn.SignedDiff,
			IsClockwise: turn.IsClockwise,
			StartIndex:  turn.StartIndex,
			EndIndex:    turn.EndIndex,
		})
	}

	// –ß–∏—Ç–∞–µ–º –ª–æ–≥
	if logFile != nil {
		logFile.Seek(0, 0)
		logBytes, _ := io.ReadAll(logFile)
		response.Log = string(logBytes)
	}

	// –°–µ–≥–º–µ–Ω—Ç—ã
	segments := analyzer.GetSegments(angles, config)
	for _, seg := range segments {
		response.Segments = append(response.Segments, SegmentInfo{
			StartIndex: seg.StartIndex,
			EndIndex:   seg.EndIndex,
			AvgAngle:   seg.AvgAngle,
			Length:     len(seg.AllAngles),
		})
	}

	if !isValid {
		response.Errors = []string{
			fmt.Sprintf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤: %d (–æ–∂–∏–¥–∞–ª–æ—Å—å 4)", len(turns)),
		}
	}

	return response
}

// BatchAnalyze –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func (a *App) BatchAnalyze(dataDir string, config analyzer.AnalysisConfig, deviceType string) []AnalysisResponse {
	folders, err := os.ReadDir(dataDir)
	if err != nil {
		return []AnalysisResponse{{
			Success: false,
			Errors:  []string{fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)},
		}}
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	var validFolders []os.DirEntry
	for _, folder := range folders {
		if folder.IsDir() {
			validFolders = append(validFolders, folder)
		}
	}

	// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏
	return a.batchAnalyzeParallel(dataDir, validFolders, config, deviceType)
}

// batchAnalyzeParallel –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏
func (a *App) batchAnalyzeParallel(dataDir string, folders []os.DirEntry, config analyzer.AnalysisConfig, deviceType string) []AnalysisResponse {
	// –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
	// –ù–∞ 4-—è–¥–µ—Ä–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ = 4 –≤–æ—Ä–∫–µ—Ä–∞, –Ω–∞ 8-—è–¥–µ—Ä–Ω–æ–º = 8
	numWorkers := runtime.NumCPU()
	if numWorkers > 8 {
		numWorkers = 8 // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
	}
	totalFolders := len(folders)
	
	// –ö–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
	jobs := make(chan int, totalFolders)
	results := make(chan struct {
		index    int
		response AnalysisResponse
	}, totalFolders)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã (–≥–æ—Ä—É—Ç–∏–Ω—ã)
	for w := 0; w < numWorkers; w++ {
		go func() {
			for index := range jobs {
				folder := folders[index]
				folderPath := filepath.Join(dataDir, folder.Name())
				
				// –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ç–∏–ø–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
				response := a.AnalyzeCompass(folderPath, config, deviceType)
				
				results <- struct {
					index    int
					response AnalysisResponse
				}{index, response}
			}
		}()
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
	for i := range folders {
		jobs <- i
	}
	close(jobs)

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	responseMap := make(map[int]AnalysisResponse)
	for i := 0; i < totalFolders; i++ {
		result := <-results
		responseMap[result.index] = result.response
	}
	close(results)

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫
	responses := make([]AnalysisResponse, totalFolders)
	for i := 0; i < totalFolders; i++ {
		responses[i] = responseMap[i]
	}

	return responses
}

// GetDefaultConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (a *App) GetDefaultConfig() analyzer.AnalysisConfig {
	return analyzer.DefaultConfig()
}

// GetHistoryDir –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
func (a *App) GetHistoryDir() (string, error) {
	return GetHistoryPath()
}

// SelectDirectory –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ Wails
func (a *App) SelectDirectory(title string) (string, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Wails runtime –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
	// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ JavaScript
	selection, err := wailsruntime.OpenDirectoryDialog(a.ctx, wailsruntime.OpenDialogOptions{
		Title: title,
	})
	
	return selection, err
}

// SaveExportFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
func (a *App) SaveExportFile(content string, filename string, fileType string, customDir string) (string, error) {
	var exportDir string
	
	if customDir != "" {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
		exportDir = customDir
	} else {
		// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ exe —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
		exePath, err := os.Executable()
		if err != nil {
			return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é: %v", err)
		}
		
		exeDir := filepath.Dir(exePath)
		
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
		if fileType == "csv" {
			exportDir = filepath.Join(exeDir, "Export Results CSV")
		} else if fileType == "json" {
			exportDir = filepath.Join(exeDir, "Export Results JSON")
		} else {
			return "", fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: %s", fileType)
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(exportDir, 0755); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: %v", err)
	}
	
	// –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	fullPath := filepath.Join(exportDir, filename)
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	if err := os.WriteFile(fullPath, []byte(content), 0644); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	
	return fullPath, nil
}
