// Compass Analyzer - Unified app.js (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ Wails, –∏ –≤ –≤–µ–±-—Ä–µ–∂–∏–º–µ)

// Global state
const state = {
    currentPage: 'analyze',
    currentData: null,
    batchResults: null,
    chart: null,
    settings: null
};

// Default settings
const DEFAULT_SETTINGS = {
    stabilityThreshold: 5.0,
    turnTolerance: 10.0,
    minSegmentLength: 2,
    maxOutliers: 0,
    sumTolerance: 20.0
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
function isWailsMode() {
    return !!(window.go && window.go.desktop && window.go.desktop.App);
}

// Load settings
function loadSettings() {
    const saved = localStorage.getItem('compassSettings');
    if (saved) {
        try {
            state.settings = JSON.parse(saved);
        } catch (e) {
            state.settings = {...DEFAULT_SETTINGS};
        }
    } else {
        state.settings = {...DEFAULT_SETTINGS};
    }
    return state.settings;
}

// Save settings
function saveSettings(settings) {
    state.settings = settings;
    localStorage.setItem('compassSettings', JSON.stringify(settings));
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    loadSettings();
    setupNavigation();
    setupButtons();
    initSettingsPage();
    
    const mode = isWailsMode() ? 'üñ•Ô∏è Desktop (Wails)' : 'üåê Web';
    showToast(`${mode} —Ä–µ–∂–∏–º –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`, 'success');
});

// Setup navigation
function setupNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            switchPage(item.dataset.page);
        });
    });
}

function switchPage(pageName) {
    document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
    document.querySelector(`[data-page="${pageName}"]`).classList.add('active');
    document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
    document.getElementById(`${pageName}Page`).classList.add('active');
    
    const titles = {
        analyze: { title: '–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞—Å–∞', subtitle: isWailsMode() ? 'Desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Wails' : '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' },
        batch: { title: '–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑', subtitle: '–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞—Å–æ–≤' },
        history: { title: '–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤', subtitle: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫' },
        settings: { title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞', subtitle: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞' }
    };
    
    document.getElementById('page-title').textContent = titles[pageName].title;
    document.getElementById('page-subtitle').textContent = titles[pageName].subtitle;
    
    state.currentPage = pageName;
}

// Setup buttons
function setupButtons() {
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ (—Ç–æ—á–µ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
    const selectFolderBtn = document.createElement('button');
    selectFolderBtn.className = 'btn btn-secondary';
    selectFolderBtn.innerHTML = '<span class="material-icons">folder_open</span>';
    selectFolderBtn.title = '–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É';
    selectFolderBtn.addEventListener('click', selectSingleFolder);
    
    const singleInputGroup = document.querySelector('#singleFolderInput').parentElement;
    singleInputGroup.insertBefore(selectFolderBtn, document.getElementById('analyzeSingleBtn'));
    
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
    const selectBatchDirBtn = document.createElement('button');
    selectBatchDirBtn.className = 'btn btn-secondary';
    selectBatchDirBtn.innerHTML = '<span class="material-icons">folder_open</span>';
    selectBatchDirBtn.title = '–í—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é';
    selectBatchDirBtn.addEventListener('click', selectBatchDirectory);
    
    const batchInputGroup = document.querySelector('#batchDirInput').parentElement;
    batchInputGroup.insertBefore(selectBatchDirBtn, document.getElementById('batchAnalyzeBtn'));
    
    document.getElementById('analyzeSingleBtn').addEventListener('click', () => {
        const folderPath = document.getElementById('singleFolderInput').value.trim();
        if (folderPath) {
            analyzeSingleFolder(folderPath);
        } else {
            showToast('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥', 'warning');
        }
    });
    
    document.getElementById('analyzeBtn').addEventListener('click', resetAnalysis);
    document.getElementById('exportBtn').addEventListener('click', exportResults);
    document.getElementById('exportCSVBtn').addEventListener('click', exportResultsCSV);
    document.getElementById('copyLogBtn').addEventListener('click', copyLog);
    
    const batchBtn = document.getElementById('batchAnalyzeBtn');
    if (batchBtn) batchBtn.addEventListener('click', handleBatchAnalyze);
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async function selectSingleFolder() {
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    try {
        const result = await window.runtime.OpenDirectoryDialog({
            Title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞—Å–∞',
            ShowHiddenFiles: false
        });
        
        if (result) {
            document.getElementById('singleFolderInput').value = result;
            showToast('üìÅ –ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞', 'success');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async function selectBatchDirectory() {
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    try {
        const result = await window.runtime.OpenDirectoryDialog({
            Title: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–∞–ø–∫–∞–º–∏ –∫–æ–º–ø–∞—Å–æ–≤',
            ShowHiddenFiles: false
        });
        
        if (result) {
            document.getElementById('batchDirInput').value = result;
            showToast('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞', 'success');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏', 'error');
    }
}

function resetAnalysis() {
    state.currentData = null;
    document.getElementById('uploadZone').style.display = 'flex';
    document.getElementById('resultsSection').style.display = 'none';
    document.getElementById('singleFolderInput').value = '';
}

// Analyze single folder (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async function analyzeSingleFolder(folderPath) {
    showLoading(true);
    
    try {
        showToast('üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç...', 'info');
        
        const config = {
            stabilityThreshold: state.settings.stabilityThreshold,
            turnTolerance: state.settings.turnTolerance,
            minStableLen: state.settings.minSegmentLength,
            maxOutliers: state.settings.maxOutliers,
            sumTolerance: state.settings.sumTolerance
        };
        
        let data;
        
        if (isWailsMode()) {
            // Wails Desktop
            console.log('üñ•Ô∏è Wails API: AnalyzeCompass');
            data = await window.go.desktop.App.AnalyzeCompass(folderPath, config);
        } else {
            // Web API
            console.log('üåê Web API: /api/analyze');
            const response = await fetch('/api/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ folder: folderPath, config: config })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            data = await response.json();
        }
        
        if (!data.success) {
            throw new Error(data.errors ? data.errors.join(', ') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
        displayResults(data);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –≤ Wails —Ä–µ–∂–∏–º–µ)
        if (isWailsMode()) {
            await saveToHistory(data, folderPath);
        }
        
        showToast('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
    } catch (error) {
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        console.error(error);
    } finally {
        showLoading(false);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
async function saveToHistory(analysisData, folderPath) {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏–∑ –ø—É—Ç–∏
        const compassName = analysisData.compass || folderPath.split(/[\/\\]/).pop() || 'Unknown';
        
        const historyItem = {
            id: '',  // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
            timestamp: Date.now(),
            compass: compassName,
            isValid: analysisData.isValid,
            turnsCount: analysisData.turns ? analysisData.turns.length : 0,
            anglesCount: analysisData.allAngles ? analysisData.allAngles.length : 0,
            fullData: JSON.stringify(analysisData)
        };
        
        await window.go.desktop.App.AddToHistory(historyItem);
        console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
}

// Batch analyze (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async function handleBatchAnalyze() {
    const dirInput = document.getElementById('batchDirInput').value.trim();
    
    if (!dirInput) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', 'warning');
        return;
    }
    
    showLoading(true, '–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
    
    try {
        const config = {
            stabilityThreshold: state.settings.stabilityThreshold,
            turnTolerance: state.settings.turnTolerance,
            minStableLen: state.settings.minSegmentLength,
            maxOutliers: state.settings.maxOutliers,
            sumTolerance: state.settings.sumTolerance
        };
        
        let results;
        
        if (isWailsMode()) {
            // Wails Desktop
            console.log('üñ•Ô∏è Wails API: BatchAnalyze');
            results = await window.go.desktop.App.BatchAnalyze(dirInput, config);
        } else {
            // Web API (fallback to non-streaming –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
            console.log('üåê Web API: /api/batch-analyze');
            const response = await fetch('/api/batch-analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ directory: dirInput, config: config })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            results = await response.json();
        }
        
        displayBatchResults(results);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –≤ Wails —Ä–µ–∂–∏–º–µ)
        if (isWailsMode() && results && results.length > 0) {
            await saveBatchToHistory(results, dirInput);
        }
        
        showToast(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length}`, 'success');
    } catch (error) {
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        console.error(error);
    } finally {
        showLoading(false);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—é
async function saveBatchToHistory(results, baseDir) {
    try {
        let savedCount = 0;
        for (const result of results) {
            if (result.success) {
                const folderPath = baseDir + '\\' + result.compass;
                await saveToHistory(result, folderPath);
                savedCount++;
            }
        }
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é: ${savedCount} –∏–∑ ${results.length}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
    }
}

// Display results
function displayResults(data) {
    state.currentData = data;
    document.getElementById('uploadZone').style.display = 'none';
    document.getElementById('resultsSection').style.display = 'block';
    
    document.getElementById('statValid').textContent = data.isValid ? '‚úì –í–∞–ª–∏–¥–Ω–æ' : '‚úó –ù–µ –ø—Ä–æ—à–ª–æ';
    document.getElementById('statValid').style.color = data.isValid ? 'var(--success)' : 'var(--error)';
    document.getElementById('statTurns').textContent = data.turns ? data.turns.length : 0;
    document.getElementById('statSegments').textContent = data.segments ? data.segments.length : 0;
    document.getElementById('statAngles').textContent = data.allAngles ? data.allAngles.length : 0;
    
    displayTurnsTable(data.turns);
    displayPolarChart(data);
    
    if (data.log) {
        document.getElementById('logViewer').textContent = data.log;
    }
    
    document.getElementById('turnsBadge').textContent = data.turns.length;
}

// Display turns table
function displayTurnsTable(turns) {
    const tbody = document.getElementById('turnsTableBody');
    
    if (!turns || turns.length === 0) {
        tbody.innerHTML = '<tr><td colspan="5" class="empty-state"><span class="material-icons">info</span>–ü–æ–≤–æ—Ä–æ—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</td></tr>';
        return;
    }
    
    tbody.innerHTML = turns.map((turn, index) => {
        const tolerance = state.settings.turnTolerance;
        const minAngle = 90 - tolerance;
        const maxAngle = 90 + tolerance;
        const diff = turn.diff || 0;
        
        let badgeClass, iconName, statusText;
        if (diff >= minAngle && diff <= maxAngle) {
            badgeClass = 'success';
            iconName = 'check_circle';
            statusText = `–í –¥–æ–ø—É—Å–∫–µ`;
        } else if (diff >= minAngle - 5 && diff <= maxAngle + 5) {
            badgeClass = 'warning';
            iconName = 'warning';
            statusText = `–ë–ª–∏–∑–∫–æ –∫ –≥—Ä–∞–Ω–∏—Ü–µ`;
        } else {
            badgeClass = 'error';
            iconName = 'cancel';
            statusText = `–ë–†–ê–ö!`;
        }
        
        const bgStyle = badgeClass === 'error' ? 'background: rgba(239, 68, 68, 0.1);' : '';
        
        return `
            <tr style="${bgStyle}">
                <td><strong>#${index + 1}</strong></td>
                <td>${(turn.startAngle || 0).toFixed(2)}¬∞</td>
                <td>${(turn.endAngle || 0).toFixed(2)}¬∞</td>
                <td><span class="badge ${badgeClass}">${diff.toFixed(2)}¬∞</span></td>
                <td><span class="material-icons" title="${statusText}">${iconName}</span></td>
            </tr>
        `;
    }).join('');
}

// Display polar chart
function displayPolarChart(data) {
    const ctx = document.getElementById('polarChart');
    
    if (state.chart) state.chart.destroy();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—Å–µ —É–≥–ª—ã)
    const angleData = data.allAngles.map((angle, index) => ({
        x: index,
        y: angle
    }));
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
    const datasets = [{
        label: '–í—Å–µ —É–≥–ª—ã',
        data: angleData,
        backgroundColor: 'rgba(99, 102, 241, 0.6)',
        borderColor: 'rgba(99, 102, 241, 1)',
        pointRadius: 3,
        pointHoverRadius: 5
    }];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ (–ø–æ–¥—Å–≤–µ—Ç–∫–∞)
    if (data.turns && data.turns.length > 0) {
        const colors = [
            'rgba(239, 68, 68, 0.8)',   // –ö—Ä–∞—Å–Ω—ã–π
            'rgba(34, 197, 94, 0.8)',   // –ó–µ–ª–µ–Ω—ã–π
            'rgba(251, 191, 36, 0.8)',  // –ñ–µ–ª—Ç—ã–π
            'rgba(147, 51, 234, 0.8)'   // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        ];
        
        data.turns.forEach((turn, index) => {
            const turnData = [];
            for (let i = turn.startIndex; i <= turn.endIndex && i < data.allAngles.length; i++) {
                turnData.push({
                    x: i,
                    y: data.allAngles[i]
                });
            }
            
            if (turnData.length > 0) {
                datasets.push({
                    label: `–ü–æ–≤–æ—Ä–æ—Ç ${index + 1}`,
                    data: turnData,
                    backgroundColor: colors[index % colors.length],
                    borderColor: colors[index % colors.length],
                    pointRadius: 5,
                    pointHoverRadius: 7,
                    showLine: true,
                    borderWidth: 2
                });
            }
        });
    }
    
    state.chart = new Chart(ctx, {
        type: 'scatter',
        data: { datasets: datasets },
        options: {
            responsive: true,
            plugins: {
                legend: { display: true },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            const index = context[0].parsed.x;
                            const angle = context[0].parsed.y;
                            return `–£–≥–æ–ª: ${angle.toFixed(2)}¬∞`;
                        },
                        label: function(context) {
                            const index = context.parsed.x;
                            return `–ò–Ω–¥–µ–∫—Å: ${index}`;
                        }
                    }
                },
                zoom: {
                    pan: { enabled: true, mode: 'xy' },
                    zoom: { wheel: { enabled: true }, pinch: { enabled: true }, mode: 'xy' }
                }
            },
            scales: {
                x: { title: { display: true, text: '–ò–Ω–¥–µ–∫—Å' } },
                y: { title: { display: true, text: '–£–≥–æ–ª (¬∞)' }, min: 0, max: 360 }
            }
        }
    });
}

// Display batch results
function displayBatchResults(results) {
    const container = document.getElementById('batchResults');
    container.style.display = 'block';
    
    state.batchResults = results;
    
    const successCount = results.filter(r => r.isValid).length;
    const failedCount = results.length - successCount;
    
    document.getElementById('batchSuccess').textContent = successCount;
    document.getElementById('batchFailed').textContent = failedCount;
    document.getElementById('batchTotal').textContent = results.length;
    
    const tbody = document.getElementById('batchResultsBody');
    tbody.innerHTML = results.map((result, index) => `
        <tr>
            <td><strong>${index + 1}</strong></td>
            <td><strong>${result.compass}</strong></td>
            <td><span class="badge ${result.isValid ? 'success' : 'error'}">${result.isValid ? '‚úì –£—Å–ø–µ—à–Ω–æ' : '‚úó –û—à–∏–±–∫–∞'}</span></td>
            <td>${result.turns ? result.turns.length : 0}/4</td>
            <td>${result.allAngles ? result.allAngles.length : '-'}</td>
        </tr>
    `).join('');
}

// Settings
function initSettingsPage() {
    updateSettingsFields();
    
    document.getElementById('saveSettingsBtn').addEventListener('click', () => {
        const newSettings = {
            stabilityThreshold: parseFloat(document.getElementById('setting-stability').value),
            turnTolerance: parseFloat(document.getElementById('setting-tolerance').value),
            minSegmentLength: parseInt(document.getElementById('setting-minLength').value),
            maxOutliers: parseInt(document.getElementById('setting-outliers').value),
            sumTolerance: parseFloat(document.getElementById('setting-sumTolerance').value)
        };
        
        saveSettings(newSettings);
        updateSettingsPreview();
        showToast('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
    });
    
    document.getElementById('resetSettingsBtn').addEventListener('click', () => {
        if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?')) {
            saveSettings({...DEFAULT_SETTINGS});
            updateSettingsFields();
            showToast('‚ôªÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
        }
    });
    
    ['setting-stability', 'setting-tolerance', 'setting-minLength', 'setting-outliers', 'setting-sumTolerance'].forEach(id => {
        document.getElementById(id).addEventListener('input', updateSettingsPreview);
    });
}

function updateSettingsFields() {
    const s = state.settings || DEFAULT_SETTINGS;
    document.getElementById('setting-stability').value = s.stabilityThreshold;
    document.getElementById('setting-tolerance').value = s.turnTolerance;
    document.getElementById('setting-minLength').value = s.minSegmentLength;
    document.getElementById('setting-outliers').value = s.maxOutliers;
    document.getElementById('setting-sumTolerance').value = s.sumTolerance;
    updateSettingsPreview();
}

function updateSettingsPreview() {
    document.getElementById('preview-stability').textContent = document.getElementById('setting-stability').value + '¬∞';
    document.getElementById('preview-tolerance').textContent = '¬±' + document.getElementById('setting-tolerance').value + '¬∞';
    document.getElementById('preview-sumTolerance').textContent = '¬±' + document.getElementById('setting-sumTolerance').value + '¬∞';
    document.getElementById('preview-minLength').textContent = document.getElementById('setting-minLength').value;
    document.getElementById('preview-outliers').textContent = document.getElementById('setting-outliers').value;
}

// Utilities
function showLoading(show, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const overlay = document.getElementById('loadingOverlay');
    overlay.classList.toggle('active', show);
    overlay.querySelector('.loading-text').textContent = message;
}

function showToast(message, type = 'info') {
    const container = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    const icons = { success: 'check_circle', error: 'error', warning: 'warning', info: 'info' };
    toast.innerHTML = `<span class="material-icons">${icons[type]}</span><span>${message}</span>`;
    container.appendChild(toast);
    
    setTimeout(() => toast.remove(), 3000);
}

function copyLog() {
    const logContent = document.getElementById('logViewer').textContent;
    navigator.clipboard.writeText(logContent).then(() => showToast('üìã –õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'success'));
}

function exportResults() {
    if (!state.currentData) {
        showToast('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 'warning');
        return;
    }
    const dataStr = JSON.stringify(state.currentData, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `compass_analysis_${Date.now()}.json`;
    link.click();
    showToast('üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ JSON', 'success');
}

function exportResultsCSV() {
    if (!state.currentData) {
        showToast('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 'warning');
        return;
    }
    let csv = '–ö–æ–º–ø–∞—Å;–†–µ–∑—É–ª—å—Ç–∞—Ç;–ü–æ–≤–æ—Ä–æ—Ç—ã;–£–≥–æ–ª 1;–£–≥–æ–ª 2;–£–≥–æ–ª 3;–£–≥–æ–ª 4\n';
    const compass = state.currentData.compass || 'Unknown';
    const status = state.currentData.isValid ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É—Å–ø–µ—à–Ω–æ';
    const turnsCount = state.currentData.turns ? state.currentData.turns.length : 0;
    const angles = ['', '', '', ''];
    if (state.currentData.turns) {
        for (let i = 0; i < Math.min(4, state.currentData.turns.length); i++) {
            const t = state.currentData.turns[i];
            angles[i] = ((t.startAngle + t.endAngle) / 2).toFixed(2);
        }
    }
    csv += `${compass};${status};${turnsCount};${angles[0]};${angles[1]};${angles[2]};${angles[3]}\n`;
    const blob = new Blob(['\uFEFF' + csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `compass_${compass}_${Date.now()}.csv`;
    link.click();
    showToast('üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ CSV', 'success');
}

// Chart zoom reset
document.addEventListener('DOMContentLoaded', () => {
    const resetBtn = document.getElementById('resetChartZoom');
    if (resetBtn) {
        resetBtn.addEventListener('click', () => {
            if (state.chart) {
                state.chart.resetZoom();
                showToast('‚ôªÔ∏è –ó—É–º —Å–±—Ä–æ—à–µ–Ω', 'info');
            }
        });
    }
});

// –°—Ç–∏–ª–∏ –¥–ª—è badge.error
const style = document.createElement('style');
style.textContent = `.badge.error { background: rgba(239, 68, 68, 0.2); color: #ef4444; border: 1px solid rgba(239, 68, 68, 0.4); }`;
document.head.appendChild(style);

// ============================================================================
// –ò–°–¢–û–†–ò–Ø –ê–ù–ê–õ–ò–ó–û–í
// ============================================================================

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û - —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
async function loadHistory() {
    if (!isWailsMode()) {
        const tbody = document.getElementById('historyTableBody');
        if (tbody) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="empty-state">
                        <span class="material-icons">info</span>
                        –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ
                    </td>
                </tr>
            `;
        }
        return;
    }
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ë–ï–ó fullData) - —ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏!
        const history = await window.go.desktop.App.LoadHistoryMetadata();
        displayHistory(history || []);
        
        console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${history.length} –∑–∞–ø–∏—Å–µ–π (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏!)`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏', 'error');
        
        const tbody = document.getElementById('historyTableBody');
        if (tbody) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="empty-state">
                        <span class="material-icons">error</span>
                        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
                    </td>
                </tr>
            `;
        }
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û - –±–µ–∑ fullData)
function displayHistory(history) {
    const tbody = document.getElementById('historyTableBody');
    
    if (!history || history.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="empty-state">
                    <span class="material-icons">history</span>
                    –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
                </td>
            </tr>
        `;
        
        document.getElementById('historySuccess').textContent = '0';
        document.getElementById('historyFailed').textContent = '0';
        document.getElementById('historyTotal').textContent = '0';
        return;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const successCount = history.filter(h => h.isValid).length;
    const failedCount = history.length - successCount;
    
    document.getElementById('historySuccess').textContent = successCount;
    document.getElementById('historyFailed').textContent = failedCount;
    document.getElementById('historyTotal').textContent = history.length;
    
    // –¢–∞–±–ª–∏—Ü–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ë–ï–ó fullData!)
    tbody.innerHTML = history.map((item, index) => {
        const date = new Date(item.timestamp);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        
        return `
            <tr>
                <td><strong>${index + 1}</strong></td>
                <td>${dateStr} ${timeStr}</td>
                <td><strong>${item.compass}</strong></td>
                <td><span class="badge ${item.isValid ? 'success' : 'error'}">${item.isValid ? '‚úì –í–∞–ª–∏–¥–Ω–æ' : '‚úó –ù–µ –ø—Ä–æ—à–ª–æ'}</span></td>
                <td>${item.turnsCount}/4</td>
                <td>${item.anglesCount || '-'}</td>
                <td>
                    <button class="btn-icon" onclick="viewHistoryItem('${item.id}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å">
                        <span class="material-icons">visibility</span>
                    </button>
                </td>
            </tr>
        `;
    }).join('');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ë–ï–ó fullData - —ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏!)
    state.historyData = history.map(item => ({
        id: item.id,
        compass: item.compass,
        timestamp: item.timestamp,
        isValid: item.isValid,
        turnsCount: item.turnsCount,
        anglesCount: item.anglesCount
        // fullData –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º! –ó–∞–≥—Ä—É–∑–∏–º –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    }));
    
    console.log(`üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${history.length} –∑–∞–ø–∏—Å–µ–π (–ë–ï–ó fullData)`);
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û - –∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏)
async function viewHistoryItem(itemId) {
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoading(true, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏...');
    
    try {
        console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏: ${itemId}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –æ–¥–Ω—É –∑–∞–ø–∏—Å—å (–≤–º–µ—Å—Ç–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏!)
        const item = await window.go.desktop.App.LoadHistoryItem(itemId);
        
        if (!item || !item.fullData) {
            throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞');
        }
        
        // –ü–∞—Ä—Å–∏–º fullData
        const fullData = JSON.parse(item.fullData);
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è ${item.compass}`);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        displayResults(fullData);
        switchPage('analyze');
        showToast('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏', 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
async function clearHistory() {
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        return;
    }
    
    try {
        await window.go.desktop.App.ClearHistory();
        await loadHistory();
        showToast('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏', 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
document.addEventListener('DOMContentLoaded', () => {
    const refreshBtn = document.getElementById('refreshHistoryBtn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', async () => {
            showToast('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...', 'info');
            await loadHistory();
        });
    }
    
    const clearBtn = document.getElementById('clearHistoryBtn');
    if (clearBtn) {
        clearBtn.addEventListener('click', clearHistory);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const historyNav = document.querySelector('[data-page="history"]');
    if (historyNav) {
        historyNav.addEventListener('click', () => {
            setTimeout(() => loadHistory(), 100);
        });
    }
});

// ============================================================================
// –†–ï–î–ê–ö–¢–û–† –§–ê–ô–õ–û–í
// ============================================================================

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function loadEditorSettings() {
    const saved = localStorage.getItem('editorSettings');
    if (saved) {
        try {
            const settings = JSON.parse(saved);
            if (settings.lastDirectory) {
                document.getElementById('editorDirInput').value = settings.lastDirectory;
            }
            if (settings.textToRemove) {
                document.getElementById('editorTextInput').value = settings.textToRemove;
            }
            if (settings.recursive !== undefined) {
                document.getElementById('editorRecursive').checked = settings.recursive;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', e);
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function saveEditorSettings() {
    const settings = {
        lastDirectory: document.getElementById('editorDirInput').value,
        textToRemove: document.getElementById('editorTextInput').value,
        recursive: document.getElementById('editorRecursive').checked
    };
    localStorage.setItem('editorSettings', JSON.stringify(settings));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    loadEditorSettings();
    
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const selectEditorBtn = document.getElementById('selectEditorDirBtn');
    if (selectEditorBtn) {
        selectEditorBtn.addEventListener('click', async () => {
            if (!isWailsMode()) {
                showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
                return;
            }
            
            try {
                const result = await window.runtime.OpenDirectoryDialog({
                    Title: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                    ShowHiddenFiles: false
                });
                
                if (result) {
                    document.getElementById('editorDirInput').value = result;
                    saveEditorSettings();
                    showToast('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞', 'success');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
                showToast('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏', 'error');
            }
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const previewBtn = document.getElementById('previewRenameBtn');
    if (previewBtn) {
        previewBtn.addEventListener('click', () => previewRename());
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const executeBtn = document.getElementById('executeRenameBtn');
    if (executeBtn) {
        executeBtn.addEventListener('click', () => executeRename());
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    ['editorDirInput', 'editorTextInput', 'editorRecursive'].forEach(id => {
        const el = document.getElementById(id);
        if (el) {
            el.addEventListener('change', saveEditorSettings);
        }
    });
});

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
async function previewRename() {
    const directory = document.getElementById('editorDirInput').value.trim();
    const textToRemove = document.getElementById('editorTextInput').value.trim();
    const recursive = document.getElementById('editorRecursive').checked;
    
    if (!directory) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', 'warning');
        return;
    }
    
    if (!textToRemove) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    showLoading(true, '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...');
    
    try {
        const stats = await window.go.desktop.App.PreviewRename(directory, textToRemove, recursive);
        displayRenameResults(stats, true);
        
        if (stats.total === 0) {
            showToast('‚ÑπÔ∏è –§–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'info');
        } else {
            showToast(`üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${stats.total}`, 'info');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
async function executeRename() {
    const directory = document.getElementById('editorDirInput').value.trim();
    const textToRemove = document.getElementById('editorTextInput').value.trim();
    const recursive = document.getElementById('editorRecursive').checked;
    
    if (!directory) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', 'warning');
        return;
    }
    
    if (!textToRemove) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const count = await window.go.desktop.App.GetFilesCount(directory, textToRemove, recursive);
    if (count === 0) {
        showToast('‚ÑπÔ∏è –§–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'info');
        return;
    }
    
    if (!confirm(`–ë—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ ${count} —Ñ–∞–π–ª–æ–≤.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
        return;
    }
    
    showLoading(true, '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    
    try {
        const stats = await window.go.desktop.App.RemoveTextFromFilenames(directory, textToRemove, recursive);
        displayRenameResults(stats, false);
        
        if (stats.success > 0) {
            showToast(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: ${stats.success} —Ñ–∞–π–ª–æ–≤`, 'success');
        }
        if (stats.failed > 0) {
            showToast(`‚ö†Ô∏è –û—à–∏–±–æ–∫: ${stats.failed}`, 'warning');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:', error);
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayRenameResults(stats, isPreview) {
    const resultsDiv = document.getElementById('renameResults');
    resultsDiv.style.display = 'block';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('renameSuccess').textContent = stats.success;
    document.getElementById('renameFailed').textContent = stats.failed;
    document.getElementById('renameTotal').textContent = stats.total;
    
    // –¢–∞–±–ª–∏—Ü–∞
    const tbody = document.getElementById('renameResultsBody');
    
    if (!stats.results || stats.results.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="4" class="empty-state">
                    <span class="material-icons">search_off</span>
                    –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = stats.results.map((result, index) => {
        const statusBadge = result.success 
            ? '<span class="badge success">‚úì –£—Å–ø–µ—à–Ω–æ</span>'
            : `<span class="badge error">‚úó ${result.error || '–û—à–∏–±–∫–∞'}</span>`;
        
        const rowStyle = result.success ? '' : 'background: rgba(239, 68, 68, 0.1);';
        
        return `
            <tr style="${rowStyle}">
                <td><strong>${index + 1}</strong></td>
                <td><code>${result.oldName}</code></td>
                <td><code>${result.newName}</code></td>
                <td>${statusBadge}</td>
            </tr>
        `;
    }).join('');
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

