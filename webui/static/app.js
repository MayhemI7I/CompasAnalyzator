// Compass Analyzer - Unified app.js (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ Wails, –∏ –≤ –≤–µ–±-—Ä–µ–∂–∏–º–µ)

// Global state
const state = {
    currentPage: 'analyze',
    currentData: null,
    batchResults: null,
    chart: null,
    settings: null,
    currentChartData: null,  // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–∞
    historyData: null,
    historyDataFull: null    // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
};

// Default settings
const DEFAULT_SETTINGS = {
    stabilityThreshold: 5.0,
    turnTolerance: 10.0,
    minSegmentLength: 2,
    maxOutliers: 0,
    sumTolerance: 20.0
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
function isWailsMode() {
    return !!(window.go && window.go.desktop && window.go.desktop.App);
}

// Load settings
function loadSettings() {
    const saved = localStorage.getItem('compassSettings');
    if (saved) {
        try {
            state.settings = JSON.parse(saved);
        } catch (e) {
            state.settings = {...DEFAULT_SETTINGS};
        }
    } else {
        state.settings = {...DEFAULT_SETTINGS};
    }
    return state.settings;
}

// Save settings
function saveSettings(settings) {
    state.settings = settings;
    localStorage.setItem('compassSettings', JSON.stringify(settings));
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    loadSettings();
    setupNavigation();
    setupButtons();
    initSettingsPage();
    
    const mode = isWailsMode() ? 'üñ•Ô∏è Desktop (Wails)' : 'üåê Web';
    showToast(`${mode} —Ä–µ–∂–∏–º –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`, 'success');
});

// Setup navigation
function setupNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            switchPage(item.dataset.page);
        });
    });
}

function switchPage(pageName) {
    document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
    document.querySelector(`[data-page="${pageName}"]`).classList.add('active');
    document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
    document.getElementById(`${pageName}Page`).classList.add('active');
    
    const titles = {
        analyze: { title: '–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞—Å–∞', subtitle: '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞—Å–æ–≤ –ú–¢–¶' },
        batch: { title: '–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑', subtitle: '–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞—Å–æ–≤ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π' },
        history: { title: '–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤', subtitle: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º' },
        settings: { title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞', subtitle: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞' },
        editor: { title: '–†–µ–¥–∞–∫—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤', subtitle: '–ú–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏' }
    };
    
    if (titles[pageName]) {
        document.getElementById('page-title').textContent = titles[pageName].title;
        document.getElementById('page-subtitle').textContent = titles[pageName].subtitle;
    }
    
    state.currentPage = pageName;
    
    console.log('üìÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', pageName);
}

// Setup buttons
function setupButtons() {
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ (—Ç–æ—á–µ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
    const selectFolderBtn = document.createElement('button');
    selectFolderBtn.className = 'btn btn-secondary';
    selectFolderBtn.innerHTML = '<span class="material-icons">folder_open</span>';
    selectFolderBtn.title = '–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É';
    selectFolderBtn.addEventListener('click', selectSingleFolder);
    
    const singleInputGroup = document.querySelector('#singleFolderInput').parentElement;
    singleInputGroup.insertBefore(selectFolderBtn, document.getElementById('analyzeSingleBtn'));
    
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
    const selectBatchDirBtn = document.createElement('button');
    selectBatchDirBtn.className = 'btn btn-secondary';
    selectBatchDirBtn.innerHTML = '<span class="material-icons">folder_open</span>';
    selectBatchDirBtn.title = '–í—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é';
    selectBatchDirBtn.addEventListener('click', selectBatchDirectory);
    
    const batchInputGroup = document.querySelector('#batchDirInput').parentElement;
    batchInputGroup.insertBefore(selectBatchDirBtn, document.getElementById('batchAnalyzeBtn'));
    
    document.getElementById('analyzeSingleBtn').addEventListener('click', () => {
        const folderPath = document.getElementById('singleFolderInput').value.trim();
        if (folderPath) {
            openAnalysisDeviceModal('single', folderPath);
        } else {
            showToast('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥', 'warning');
        }
    });
    
    document.getElementById('analyzeBtn').addEventListener('click', resetAnalysis);
    document.getElementById('exportBtn').addEventListener('click', exportResults);
    document.getElementById('exportCSVBtn').addEventListener('click', exportResultsCSV);
    document.getElementById('copyLogBtn').addEventListener('click', copyLog);
    
    const batchBtn = document.getElementById('batchAnalyzeBtn');
    if (batchBtn) batchBtn.addEventListener('click', () => {
        const dirInput = document.getElementById('batchDirInput').value.trim();
        if (!dirInput) {
            showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', 'warning');
            return;
        }
        openAnalysisDeviceModal('batch', dirInput);
    });
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async function selectSingleFolder() {
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Go –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Wails binding
        const result = await window.go.desktop.App.SelectDirectory('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞—Å–∞');
        
        if (result) {
            document.getElementById('singleFolderInput').value = result;
            showToast('üìÅ –ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞', 'success');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:', error);
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message || error}`, 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async function selectBatchDirectory() {
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Go –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Wails binding
        const result = await window.go.desktop.App.SelectDirectory('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–∞–ø–∫–∞–º–∏ –∫–æ–º–ø–∞—Å–æ–≤');
        
        if (result) {
            document.getElementById('batchDirInput').value = result;
            showToast('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞', 'success');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message || error}`, 'error');
    }
}

function resetAnalysis() {
    state.currentData = null;
    document.getElementById('uploadZone').style.display = 'flex';
    document.getElementById('resultsSection').style.display = 'none';
    document.getElementById('singleFolderInput').value = '';
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById('page-title').textContent = '–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞—Å–∞';
    document.getElementById('page-subtitle').textContent = '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞—Å–æ–≤ –ú–¢–¶';
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
function openAnalysisDeviceModal(analysisType, path) {
    const modal = document.getElementById('analysisDeviceTypeModal');
    modal.style.display = 'flex';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–∏–ø
    const lastDeviceType = localStorage.getItem('lastDeviceType') || '–ö–æ—Ä–∞–ª–ª';
    document.getElementById('analysisDeviceTypeInput').value = lastDeviceType;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmBtn = document.getElementById('confirmAnalysisBtn');
    confirmBtn.onclick = () => {
        const deviceType = document.getElementById('analysisDeviceTypeInput').value.trim();
        if (!deviceType) {
            showToast('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 'warning');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–∏–ø
        localStorage.setItem('lastDeviceType', deviceType);
        
        closeAnalysisDeviceModal();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        if (analysisType === 'single') {
            analyzeSingleFolder(path, deviceType);
        } else if (analysisType === 'batch') {
            handleBatchAnalyze(path, deviceType);
        }
    };
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
        document.getElementById('analysisDeviceTypeInput').focus();
        document.getElementById('analysisDeviceTypeInput').select();
    }, 100);
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
window.closeAnalysisDeviceModal = function() {
    document.getElementById('analysisDeviceTypeModal').style.display = 'none';
};

// Analyze single folder (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async function analyzeSingleFolder(folderPath, deviceType) {
    showLoading(true);
    
    try {
        showToast('üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç...', 'info');
        
        const config = {
            stabilityThreshold: state.settings.stabilityThreshold,
            turnTolerance: state.settings.turnTolerance,
            minStableLen: state.settings.minSegmentLength,
            maxOutliers: state.settings.maxOutliers,
            sumTolerance: state.settings.sumTolerance
        };
        
        let data;
        
        if (isWailsMode()) {
            // Wails Desktop
            console.log('üñ•Ô∏è Wails API: AnalyzeCompass');
            data = await window.go.desktop.App.AnalyzeCompass(folderPath, config, deviceType);
        } else {
            // Web API
            console.log('üåê Web API: /api/analyze');
            const response = await fetch('/api/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ folder: folderPath, config: config, deviceType: deviceType })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            data = await response.json();
        }
        
        if (!data.success) {
            throw new Error(data.errors ? data.errors.join(', ') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
        displayResults(data);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –≤ Wails —Ä–µ–∂–∏–º–µ)
        if (isWailsMode()) {
            await saveToHistory(data, folderPath);
        }
        
        showToast('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
    } catch (error) {
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        console.error(error);
    } finally {
        showLoading(false);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
async function saveToHistory(analysisData, folderPath) {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏–∑ –ø—É—Ç–∏
        const compassName = analysisData.compass || folderPath.split(/[\/\\]/).pop() || 'Unknown';
        
        const historyItem = {
            id: '',  // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
            timestamp: Date.now(),
            compass: compassName,
            deviceType: analysisData.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            isValid: analysisData.isValid,
            turnsCount: analysisData.turns ? analysisData.turns.length : 0,
            anglesCount: analysisData.allAngles ? analysisData.allAngles.length : 0,
            fullData: JSON.stringify(analysisData)
        };
        
        await window.go.desktop.App.AddToHistory(historyItem);
        console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
}

// Batch analyze (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async function handleBatchAnalyze(dirInput, deviceType) {
    showLoading(true, '–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
    
    try {
        const config = {
            stabilityThreshold: state.settings.stabilityThreshold,
            turnTolerance: state.settings.turnTolerance,
            minStableLen: state.settings.minSegmentLength,
            maxOutliers: state.settings.maxOutliers,
            sumTolerance: state.settings.sumTolerance
        };
        
        let results;
        
        if (isWailsMode()) {
            // Wails Desktop
            console.log('üñ•Ô∏è Wails API: BatchAnalyze');
            results = await window.go.desktop.App.BatchAnalyze(dirInput, config, deviceType);
        } else {
            // Web API (fallback to non-streaming –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
            console.log('üåê Web API: /api/batch-analyze');
            const response = await fetch('/api/batch-analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ directory: dirInput, config: config, deviceType: deviceType })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            results = await response.json();
        }
        
        displayBatchResults(results);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        showToast(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length}`, 'success');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≤ –§–û–ù–ï (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI)
        if (isWailsMode() && results && results.length > 0) {
            saveBatchToHistory(results, dirInput).then(() => {
                console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é');
                showToast('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é', 'success');
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', err);
            });
        }
    } catch (error) {
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        console.error(error);
    } finally {
        showLoading(false);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—é (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
async function saveBatchToHistory(results, baseDir) {
    try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const historyItems = [];
        
        for (const result of results) {
            if (result.success) {
                const compassName = result.compass || 'Unknown';
                
                historyItems.push({
                    id: '',  // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
                    timestamp: Date.now(),
                    compass: compassName,
                    deviceType: result.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    isValid: result.isValid,
                    turnsCount: result.turns ? result.turns.length : 0,
                    anglesCount: result.allAngles ? result.allAngles.length : 0,
                    fullData: JSON.stringify(result)
                });
            }
        }
        
        if (historyItems.length > 0) {
            // –û–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ —Ç—ã—Å—è—á!
            await window.go.desktop.App.AddManyToHistory(historyItems);
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é: ${historyItems.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
    }
}

// Display results
function displayResults(data) {
    state.currentData = data;
    document.getElementById('uploadZone').style.display = 'none';
    document.getElementById('resultsSection').style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∫–æ–º–ø–∞—Å–∞
    const compassName = data.compass || 'Unknown';
    document.getElementById('page-title').textContent = `–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞—Å–∞: ${compassName}`;
    document.getElementById('page-subtitle').textContent = `–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞`;
    
    document.getElementById('statValid').textContent = data.isValid ? '‚úì –í–∞–ª–∏–¥–Ω–æ' : '‚úó –ù–µ –ø—Ä–æ—à–ª–æ';
    document.getElementById('statValid').style.color = data.isValid ? 'var(--success)' : 'var(--error)';
    document.getElementById('statTurns').textContent = data.turns ? data.turns.length : 0;
    document.getElementById('statSegments').textContent = data.segments ? data.segments.length : 0;
    document.getElementById('statAngles').textContent = data.allAngles ? data.allAngles.length : 0;
    
    displayTurnsTable(data.turns || []);
    displayPolarChart(data);
    
    if (data.log) {
        document.getElementById('logViewer').textContent = data.log;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ turns
    document.getElementById('turnsBadge').textContent = (data.turns && data.turns.length) || 0;
}

// Display turns table
function displayTurnsTable(turns) {
    const tbody = document.getElementById('turnsTableBody');
    
    if (!turns || !Array.isArray(turns) || turns.length === 0) {
        tbody.innerHTML = '<tr><td colspan="5" class="empty-state"><span class="material-icons">info</span>–ü–æ–≤–æ—Ä–æ—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</td></tr>';
        return;
    }
    
    tbody.innerHTML = turns.map((turn, index) => {
        const tolerance = state.settings.turnTolerance;
        const minAngle = 90 - tolerance;
        const maxAngle = 90 + tolerance;
        const diff = turn.diff || 0;
        
        let badgeClass, iconName, statusText;
        if (diff >= minAngle && diff <= maxAngle) {
            badgeClass = 'success';
            iconName = 'check_circle';
            statusText = `–í –¥–æ–ø—É—Å–∫–µ`;
        } else if (diff >= minAngle - 5 && diff <= maxAngle + 5) {
            badgeClass = 'warning';
            iconName = 'warning';
            statusText = `–ë–ª–∏–∑–∫–æ –∫ –≥—Ä–∞–Ω–∏—Ü–µ`;
        } else {
            badgeClass = 'error';
            iconName = 'cancel';
            statusText = `–ë–†–ê–ö!`;
        }
        
        const bgStyle = badgeClass === 'error' ? 'background: rgba(239, 68, 68, 0.1);' : '';
        
        return `
            <tr style="${bgStyle}">
                <td><strong>#${index + 1}</strong></td>
                <td>${(turn.startAngle || 0).toFixed(2)}¬∞</td>
                <td>${(turn.endAngle || 0).toFixed(2)}¬∞</td>
                <td><span class="badge ${badgeClass}">${diff.toFixed(2)}¬∞</span></td>
                <td><span class="material-icons" title="${statusText}">${iconName}</span></td>
            </tr>
        `;
    }).join('');
}

// Display polar chart
function displayPolarChart(data, startIndex = null, endIndex = null) {
    const ctx = document.getElementById('polarChart');
    
    if (state.chart) state.chart.destroy();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    state.currentChartData = data;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const allAngles = (data && data.allAngles && Array.isArray(data.allAngles)) ? data.allAngles : [];
    const turns = (data && data.turns && Array.isArray(data.turns)) ? data.turns : [];
    
    if (allAngles.length === 0) {
        // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const canvas = document.getElementById('polarChart');
        const context = canvas.getContext('2d');
        context.clearRect(0, 0, canvas.width, canvas.height);
        context.font = '16px Arial';
        context.fillStyle = '#999';
        context.textAlign = 'center';
        context.fillText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞', canvas.width / 2, canvas.height / 2);
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    const start = startIndex !== null ? startIndex : 0;
    const end = endIndex !== null ? endIndex : allAngles.length - 1;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    document.getElementById('chartStartIndex').value = start;
    document.getElementById('chartEndIndex').value = end;
    document.getElementById('chartStartIndex').max = allAngles.length - 1;
    document.getElementById('chartEndIndex').max = allAngles.length - 1;
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å —É—á–µ—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
    const angleData = allAngles
        .map((angle, index) => ({ x: index, y: angle }))
        .filter(point => point.x >= start && point.x <= end);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
    const datasets = [{
        label: '–í—Å–µ —É–≥–ª—ã',
        data: angleData,
        backgroundColor: 'rgba(99, 102, 241, 0.6)',
        borderColor: 'rgba(99, 102, 241, 1)',
        pointRadius: 3,
        pointHoverRadius: 5
    }];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ (–ø–æ–¥—Å–≤–µ—Ç–∫–∞, —Å —É—á–µ—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
    if (turns.length > 0) {
        const colors = [
            'rgba(239, 68, 68, 0.8)',   // –ö—Ä–∞—Å–Ω—ã–π
            'rgba(34, 197, 94, 0.8)',   // –ó–µ–ª–µ–Ω—ã–π
            'rgba(251, 191, 36, 0.8)',  // –ñ–µ–ª—Ç—ã–π
            'rgba(147, 51, 234, 0.8)'   // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        ];
        
        turns.forEach((turn, index) => {
            const turnData = [];
            // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
            const turnStart = Math.max(turn.startIndex, start);
            const turnEnd = Math.min(turn.endIndex, end);
            
            for (let i = turnStart; i <= turnEnd && i < allAngles.length; i++) {
                turnData.push({
                    x: i,
                    y: allAngles[i]
                });
            }
            
            if (turnData.length > 0) {
                datasets.push({
                    label: `–ü–æ–≤–æ—Ä–æ—Ç ${index + 1}`,
                    data: turnData,
                    backgroundColor: colors[index % colors.length],
                    borderColor: colors[index % colors.length],
                    pointRadius: 5,
                    pointHoverRadius: 7,
                    showLine: true,
                    borderWidth: 2
                });
            }
        });
    }
    
    state.chart = new Chart(ctx, {
        type: 'scatter',
        data: { datasets: datasets },
        options: {
            responsive: true,
            plugins: {
                legend: { display: true },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            const index = context[0].parsed.x;
                            const angle = context[0].parsed.y;
                            return `–£–≥–æ–ª: ${angle.toFixed(2)}¬∞`;
                        },
                        label: function(context) {
                            const index = context.parsed.x;
                            return `–ò–Ω–¥–µ–∫—Å: ${index}`;
                        }
                    }
                },
                zoom: {
                    pan: { enabled: true, mode: 'xy' },
                    zoom: { wheel: { enabled: true }, pinch: { enabled: true }, mode: 'xy' }
                }
            },
            scales: {
                x: { title: { display: true, text: '–ò–Ω–¥–µ–∫—Å' } },
                y: { title: { display: true, text: '–£–≥–æ–ª (¬∞)' }, min: 0, max: 360 }
            }
        }
    });
}

// Display batch results
function displayBatchResults(results) {
    const container = document.getElementById('batchResults');
    container.style.display = 'block';
    
    state.batchResults = results;
    
    const successCount = results.filter(r => r.isValid).length;
    const failedCount = results.length - successCount;
    
    document.getElementById('batchSuccess').textContent = successCount;
    document.getElementById('batchFailed').textContent = failedCount;
    document.getElementById('batchTotal').textContent = results.length;
    
    const tbody = document.getElementById('batchResultsBody');
    tbody.innerHTML = results.map((result, index) => `
        <tr>
            <td><strong>${index + 1}</strong></td>
            <td><strong>${result.compass}</strong></td>
            <td>${result.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
            <td><span class="badge ${result.isValid ? 'success' : 'error'}">${result.isValid ? '‚úì –£—Å–ø–µ—à–Ω–æ' : '‚úó –û—à–∏–±–∫–∞'}</span></td>
            <td>${result.turns ? result.turns.length : 0}/4</td>
            <td>
                <button class="btn-icon" onclick="viewBatchResult(${index})" title="–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä">
                    <span class="material-icons">visibility</span>
                </button>
            </td>
        </tr>
    `).join('');
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è onclick)
window.viewBatchResult = function(index) {
    try {
        console.log('üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', index);
        
        if (!state.batchResults || !Array.isArray(state.batchResults)) {
            console.error('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            showToast('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
            return;
        }
        
        if (index < 0 || index >= state.batchResults.length) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å:', index, '–∏–∑', state.batchResults.length);
            showToast('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å)', 'warning');
            return;
        }
        
        const result = state.batchResults[index];
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω:', result);
        
        if (!result) {
            showToast('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning');
            return;
        }
        
        if (!result.success) {
            showToast('‚ö†Ô∏è –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', 'warning');
            return;
        }
        
        console.log('üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', result.compass);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        displayResults(result);
        switchPage('analyze');
        showToast(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${result.compass}`, 'info');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
        showToast(`–û—à–∏–±–∫–∞: ${error.message || error}`, 'error');
    }
};

// Settings
function initSettingsPage() {
    updateSettingsFields();
    
    document.getElementById('saveSettingsBtn').addEventListener('click', () => {
        const newSettings = {
            stabilityThreshold: parseFloat(document.getElementById('setting-stability').value),
            turnTolerance: parseFloat(document.getElementById('setting-tolerance').value),
            minSegmentLength: parseInt(document.getElementById('setting-minLength').value),
            maxOutliers: parseInt(document.getElementById('setting-outliers').value),
            sumTolerance: parseFloat(document.getElementById('setting-sumTolerance').value)
        };
        
        saveSettings(newSettings);
        updateSettingsPreview();
        showToast('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
    });
    
    document.getElementById('resetSettingsBtn').addEventListener('click', () => {
        if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?')) {
            saveSettings({...DEFAULT_SETTINGS});
            updateSettingsFields();
            showToast('‚ôªÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
        }
    });
    
    ['setting-stability', 'setting-tolerance', 'setting-minLength', 'setting-outliers', 'setting-sumTolerance'].forEach(id => {
        document.getElementById(id).addEventListener('input', updateSettingsPreview);
    });
}

function updateSettingsFields() {
    const s = state.settings || DEFAULT_SETTINGS;
    document.getElementById('setting-stability').value = s.stabilityThreshold;
    document.getElementById('setting-tolerance').value = s.turnTolerance;
    document.getElementById('setting-minLength').value = s.minSegmentLength;
    document.getElementById('setting-outliers').value = s.maxOutliers;
    document.getElementById('setting-sumTolerance').value = s.sumTolerance;
    updateSettingsPreview();
}

function updateSettingsPreview() {
    document.getElementById('preview-stability').textContent = document.getElementById('setting-stability').value + '¬∞';
    document.getElementById('preview-tolerance').textContent = '¬±' + document.getElementById('setting-tolerance').value + '¬∞';
    document.getElementById('preview-sumTolerance').textContent = '¬±' + document.getElementById('setting-sumTolerance').value + '¬∞';
    document.getElementById('preview-minLength').textContent = document.getElementById('setting-minLength').value;
    document.getElementById('preview-outliers').textContent = document.getElementById('setting-outliers').value;
}

// Utilities
function showLoading(show, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const overlay = document.getElementById('loadingOverlay');
    overlay.classList.toggle('active', show);
    overlay.querySelector('.loading-text').textContent = message;
}

function showToast(message, type = 'info') {
    const container = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    const icons = { success: 'check_circle', error: 'error', warning: 'warning', info: 'info' };
    toast.innerHTML = `<span class="material-icons">${icons[type]}</span><span>${message}</span>`;
    container.appendChild(toast);
    
    setTimeout(() => toast.remove(), 3000);
}

function copyLog() {
    const logContent = document.getElementById('logViewer').textContent;
    navigator.clipboard.writeText(logContent).then(() => showToast('üìã –õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'success'));
}

async function exportResults() {
    if (!state.currentData) {
        showToast('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 'warning');
        return;
    }
    
    const dataStr = JSON.stringify(state.currentData, null, 2);
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const compass = state.currentData.compass || 'Unknown';
    const filename = `compass_analysis_${compass}_${timestamp}.json`;
    
    if (isWailsMode()) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ Go backend –≤ –ø–∞–ø–∫—É "Export Results JSON"
            const savedDir = localStorage.getItem('lastExportDir') || '';
            const savedPath = await window.go.desktop.App.SaveExportFile(dataStr, filename, 'json', savedDir);
            showToast(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${savedPath}`, 'success');
            console.log('‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', savedPath);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ backend:', error);
            // Fallback - –æ–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            downloadFileDirectly(dataStr, filename, 'application/json');
        }
    } else {
        // –í –≤–µ–±-—Ä–µ–∂–∏–º–µ - –æ–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        downloadFileDirectly(dataStr, filename, 'application/json');
    }
}

function exportResultsCSV() {
    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç CSV:', {
        currentPage: state.currentPage,
        hasBatchResults: !!state.batchResults,
        hasHistoryData: !!state.historyDataFull,
        hasCurrentData: !!state.currentData
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –æ—Ç–∫—É–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    const currentPage = state.currentPage;
    
    if (currentPage === 'batch' && state.batchResults && state.batchResults.length > 0) {
        // –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –í–°–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('‚Üí –≠–∫—Å–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', state.batchResults.length);
        exportBatchCSV(state.batchResults);
    } else if (currentPage === 'history' && state.historyDataFull && state.historyDataFull.length > 0) {
        // –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ - –í–°–ï –∑–∞–ø–∏—Å–∏ (—É—á–∏—Ç—ã–≤–∞—è —Ñ–∏–ª—å—Ç—Ä—ã)
        console.log('‚Üí –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏');
        exportHistoryCSV();
    } else if (state.currentData) {
        // –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –û–î–ò–ù —Ñ–∞–π–ª
        console.log('‚Üí –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', state.currentData.compass);
        exportSingleCSV(state.currentData);
    } else {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. State:', state);
        showToast('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
function openDeviceTypeModal(exportType, data) {
    const modal = document.getElementById('deviceTypeModal');
    modal.style.display = 'flex';
    
    // –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    let count = 1;
    if (exportType === 'batch') {
        count = data.length;
    } else if (exportType === 'history') {
        const filtered = applyHistoryFilters(data);
        count = filtered.length;
    }
    
    document.getElementById('exportCount').textContent = count;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
    const savedDir = localStorage.getItem('lastExportDir');
    document.getElementById('exportDirInput').value = savedDir || '(—Ä—è–¥–æ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π)';
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const selectDirBtn = document.getElementById('selectExportDirBtn');
    selectDirBtn.onclick = async () => {
        if (!isWailsMode()) {
            showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
            return;
        }
        
        try {
            const result = await window.go.desktop.App.SelectDirectory('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            if (result) {
                document.getElementById('exportDirInput').value = result;
                localStorage.setItem('lastExportDir', result);
                showToast('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞', 'success');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
            showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message || error}`, 'error');
        }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º exportType –∏ data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    modal.dataset.exportType = exportType;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmBtn = document.getElementById('confirmExportBtn');
    confirmBtn.onclick = () => {
        const exportDir = document.getElementById('exportDirInput').value;
        const customDir = (exportDir && exportDir !== '(—Ä—è–¥–æ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π)') ? exportDir : null;
        
        closeDeviceTypeModal();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç (—Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö)
        if (exportType === 'single') {
            executeSingleExport(data, customDir);
        } else if (exportType === 'batch') {
            executeBatchExport(data, customDir);
        } else if (exportType === 'history') {
            executeHistoryExport(data, customDir);
        }
    };
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è onclick)
window.closeDeviceTypeModal = function() {
    document.getElementById('deviceTypeModal').style.display = 'none';
};

// –≠–∫—Å–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
function exportSingleCSV(data) {
    openDeviceTypeModal('single', data);
}

function executeSingleExport(data, customDir) {
    // –ë–µ—Ä–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞
    const deviceType = data.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    let csv = '‚Ññ –î–°–°;–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞;–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤;–ü–æ–≤–æ—Ä–æ—Ç 1;–ü–æ–≤–æ—Ä–æ—Ç 2;–ü–æ–≤–æ—Ä–æ—Ç 3;–ü–æ–≤–æ—Ä–æ—Ç 4\n';
    
    const dss = data.compass || 'Unknown';
    const status = data.isValid ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ –ø—Ä–æ—à–ª–æ';
    const turnsCount = data.turns ? data.turns.length : 0;
    const angles = ['', '', '', ''];
    
    if (data.turns) {
        for (let i = 0; i < Math.min(4, data.turns.length); i++) {
            const t = data.turns[i];
            angles[i] = t.diff ? t.diff.toFixed(2) + '¬∞' : '-';
        }
    }
    
    csv += `${dss};${deviceType};${status};${turnsCount};${angles[0]};${angles[1]};${angles[2]};${angles[3]}\n`;
    
    downloadCSV(csv, `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ "${deviceType}"`, dss, customDir);
    showToast('üì• –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
function exportBatchCSV(results) {
    openDeviceTypeModal('batch', results);
}

function executeBatchExport(results, customDir) {
    // –ë–µ—Ä–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–≤—Å–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω —Ç–∏–ø)
    const deviceType = (results[0] && results[0].deviceType) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    let csv = '‚Ññ –î–°–°;–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞;–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤;–ü–æ–≤–æ—Ä–æ—Ç 1;–ü–æ–≤–æ—Ä–æ—Ç 2;–ü–æ–≤–æ—Ä–æ—Ç 3;–ü–æ–≤–æ—Ä–æ—Ç 4\n';
    
    results.forEach(result => {
        if (result.success) {
            const dss = result.compass || 'Unknown';
            const type = result.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const status = result.isValid ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ –ø—Ä–æ—à–ª–æ';
            const turnsCount = result.turns ? result.turns.length : 0;
            const angles = ['', '', '', ''];
            
            if (result.turns) {
                for (let i = 0; i < Math.min(4, result.turns.length); i++) {
                    const t = result.turns[i];
                    angles[i] = t.diff ? t.diff.toFixed(2) + '¬∞' : '-';
                }
            }
            
            csv += `${dss};${type};${status};${turnsCount};${angles[0]};${angles[1]};${angles[2]};${angles[3]}\n`;
        }
    });
    
    downloadCSV(csv, `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ "${deviceType}"`, 'batch', customDir);
    showToast(`üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${results.length} –∑–∞–ø–∏—Å–µ–π`, 'success');
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
function exportHistoryCSV() {
    if (!state.historyDataFull) {
        showToast('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
        return;
    }
    
    openDeviceTypeModal('history', state.historyDataFull);
}

async function executeHistoryExport(historyData, customDir) {
    showLoading(true, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CSV...');
    
    try {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const filteredData = applyHistoryFilters(historyData);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        // –ï—Å–ª–∏ –≤—Å–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ —Ä–∞–∑–Ω—ã–µ - "–°–º–µ—à–∞–Ω–Ω—ã–µ"
        const deviceTypes = new Set(filteredData.map(item => item.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'));
        const deviceType = deviceTypes.size === 1 ? Array.from(deviceTypes)[0] : '–°–º–µ—à–∞–Ω–Ω—ã–µ';
        
        let csv = '‚Ññ –î–°–°;–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞;–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤;–ü–æ–≤–æ—Ä–æ—Ç 1;–ü–æ–≤–æ—Ä–æ—Ç 2;–ü–æ–≤–æ—Ä–æ—Ç 3;–ü–æ–≤–æ—Ä–æ—Ç 4\n';
        
        // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º
        const itemIDs = filteredData.map(item => item.id);
        const fullItems = await window.go.desktop.App.LoadHistoryItems(itemIDs);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        fullItems.forEach(fullHistory => {
            const fullData = JSON.parse(fullHistory.fullData);
            
            const dss = fullData.compass || fullHistory.compass || 'Unknown';
            const type = fullData.deviceType || fullHistory.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const status = fullData.isValid ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ –ø—Ä–æ—à–ª–æ';
            const turnsCount = fullData.turns ? fullData.turns.length : 0;
            const angles = ['', '', '', ''];
            
            if (fullData.turns) {
                for (let i = 0; i < Math.min(4, fullData.turns.length); i++) {
                    const t = fullData.turns[i];
                    angles[i] = t.diff ? t.diff.toFixed(2) + '¬∞' : '-';
                }
            }
            
            csv += `${dss};${type};${status};${turnsCount};${angles[0]};${angles[1]};${angles[2]};${angles[3]}\n`;
        });
        
        downloadCSV(csv, `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ "${deviceType}"`, 'history', customDir);
        showToast(`üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`, 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', 'error');
    } finally {
        showLoading(false);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É)
async function downloadCSV(csvContent, filePrefix, suffix, customDir = null) {
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const filename = `${filePrefix}_${timestamp}_${suffix}.csv`;
    
    if (isWailsMode()) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ Go backend
            const savedPath = await window.go.desktop.App.SaveExportFile(csvContent, filename, 'csv', customDir || '');
            showToast(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${savedPath}`, 'success');
            console.log('‚úÖ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', savedPath);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ backend:', error);
            // Fallback - –æ–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            downloadFileDirectly(csvContent, filename, 'text/csv;charset=utf-8;');
        }
    } else {
        // –í –≤–µ–±-—Ä–µ–∂–∏–º–µ - –æ–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        downloadFileDirectly(csvContent, filename, 'text/csv;charset=utf-8;');
    }
}

// –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (fallback)
function downloadFileDirectly(content, filename, mimeType) {
    const blob = new Blob(['\uFEFF' + content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.click();
    URL.revokeObjectURL(url);
}

// Chart zoom reset and range controls
document.addEventListener('DOMContentLoaded', () => {
    const resetBtn = document.getElementById('resetChartZoom');
    if (resetBtn) {
        resetBtn.addEventListener('click', () => {
            if (state.chart) {
                state.chart.resetZoom();
                showToast('‚ôªÔ∏è –ó—É–º —Å–±—Ä–æ—à–µ–Ω', 'info');
            }
        });
    }
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∏–Ω–¥–µ–∫—Å–æ–≤
    const applyRangeBtn = document.getElementById('applyChartRange');
    if (applyRangeBtn) {
        applyRangeBtn.addEventListener('click', () => {
            if (!state.currentChartData) {
                showToast('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'warning');
                return;
            }
            
            const startIndex = parseInt(document.getElementById('chartStartIndex').value);
            const endIndex = parseInt(document.getElementById('chartEndIndex').value);
            
            if (isNaN(startIndex) || isNaN(endIndex)) {
                showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã', 'warning');
                return;
            }
            
            if (startIndex >= endIndex) {
                showToast('‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ', 'warning');
                return;
            }
            
            if (startIndex < 0 || endIndex >= state.currentChartData.allAngles.length) {
                showToast(`‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ ${state.currentChartData.allAngles.length - 1}`, 'warning');
                return;
            }
            
            displayPolarChart(state.currentChartData, startIndex, endIndex);
            showToast(`üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: ${startIndex} - ${endIndex}`, 'success');
        });
    }
    
    // –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω (–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ)
    const resetRangeBtn = document.getElementById('resetChartRange');
    if (resetRangeBtn) {
        resetRangeBtn.addEventListener('click', () => {
            if (!state.currentChartData) {
                showToast('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'warning');
                return;
            }
            
            displayPolarChart(state.currentChartData);
            showToast('‚ôªÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ', 'info');
        });
    }
});

// –°—Ç–∏–ª–∏ –¥–ª—è badge.error
const style = document.createElement('style');
style.textContent = `.badge.error { background: rgba(239, 68, 68, 0.2); color: #ef4444; border: 1px solid rgba(239, 68, 68, 0.4); }`;
document.head.appendChild(style);

// ============================================================================
// –ò–°–¢–û–†–ò–Ø –ê–ù–ê–õ–ò–ó–û–í
// ============================================================================

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û - —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
async function loadHistory() {
    if (!isWailsMode()) {
        const tbody = document.getElementById('historyTableBody');
        if (tbody) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="empty-state">
                        <span class="material-icons">info</span>
                        –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ
                    </td>
                </tr>
            `;
        }
        return;
    }
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ë–ï–ó fullData) - —ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏!
        const history = await window.go.desktop.App.LoadHistoryMetadata();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        updateDeviceTypeFilter(history);
        
        displayHistory(history || []);
        
        console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${history.length} –∑–∞–ø–∏—Å–µ–π (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏!)`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏', 'error');
        
        const tbody = document.getElementById('historyTableBody');
        if (tbody) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="empty-state">
                        <span class="material-icons">error</span>
                        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
                    </td>
                </tr>
            `;
        }
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ñ–∏–ª—å—Ç—Ä–µ
function updateDeviceTypeFilter(history) {
    const select = document.getElementById('historyFilterDeviceType');
    if (!select) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const deviceTypes = [...new Set(history.map(item => item.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))];
    deviceTypes.sort();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    select.innerHTML = '<option value="all">–í—Å–µ —Ç–∏–ø—ã</option>';
    deviceTypes.forEach(type => {
        select.innerHTML += `<option value="${type}">${type}</option>`;
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û - –±–µ–∑ fullData)
function displayHistory(history, applyFilters = false) {
    const tbody = document.getElementById('historyTableBody');
    
    if (!history || history.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="empty-state">
                    <span class="material-icons">history</span>
                    –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
                </td>
            </tr>
        `;
        
        document.getElementById('historySuccess').textContent = '0';
        document.getElementById('historyFailed').textContent = '0';
        document.getElementById('historyTotal').textContent = '0';
        return;
    }
    
    let filteredHistory = [...history];
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (applyFilters) {
        filteredHistory = applyHistoryFilters(history);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º)
    const successCount = filteredHistory.filter(h => h.isValid).length;
    const failedCount = filteredHistory.length - successCount;
    
    document.getElementById('historySuccess').textContent = successCount;
    document.getElementById('historyFailed').textContent = failedCount;
    document.getElementById('historyTotal').textContent = filteredHistory.length;
    
    // –¢–∞–±–ª–∏—Ü–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ë–ï–ó fullData!)
    tbody.innerHTML = filteredHistory.map((item, index) => {
        const date = new Date(item.timestamp);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        
        return `
            <tr>
                <td><strong>${index + 1}</strong></td>
                <td>${dateStr} ${timeStr}</td>
                <td><strong>${item.compass}</strong></td>
                <td>${item.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                <td><span class="badge ${item.isValid ? 'success' : 'error'}">${item.isValid ? '‚úì –í–∞–ª–∏–¥–Ω–æ' : '‚úó –ù–µ –ø—Ä–æ—à–ª–æ'}</span></td>
                <td>${item.turnsCount}/4</td>
                <td>
                    <button class="btn-icon" onclick="viewHistoryItem('${item.id}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å">
                        <span class="material-icons">visibility</span>
                    </button>
                </td>
            </tr>
        `;
    }).join('');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ë–ï–ó fullData - —ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏!)
    state.historyData = history.map(item => ({
        id: item.id,
        compass: item.compass,
        deviceType: item.deviceType,
        timestamp: item.timestamp,
        isValid: item.isValid,
        turnsCount: item.turnsCount,
        anglesCount: item.anglesCount
        // fullData –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º! –ó–∞–≥—Ä—É–∑–∏–º –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    }));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    state.historyDataFull = history;
    
    console.log(`üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${history.length} –∑–∞–ø–∏—Å–µ–π, –ø–æ–∫–∞–∑–∞–Ω–æ: ${filteredHistory.length} (–ë–ï–ó fullData)`);
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û - –∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏, –≥–ª–æ–±–∞–ª—å–Ω–∞—è –¥–ª—è onclick)
window.viewHistoryItem = async function(itemId) {
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoading(true, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏...');
    
    try {
        console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏: ${itemId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Go API
        if (!window.go || !window.go.desktop || !window.go.desktop.App) {
            throw new Error('Go API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –æ–¥–Ω—É –∑–∞–ø–∏—Å—å (–≤–º–µ—Å—Ç–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏!)
        const item = await window.go.desktop.App.LoadHistoryItem(itemId);
        
        if (!item) {
            throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        if (!item.fullData) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã');
        }
        
        // –ü–∞—Ä—Å–∏–º fullData —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        let fullData;
        try {
            fullData = typeof item.fullData === 'string' ? JSON.parse(item.fullData) : item.fullData;
        } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ fullData:', parseError);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞');
        }
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è ${item.compass}`, fullData);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        displayResults(fullData);
        switchPage('analyze');
        showToast('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showToast(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
function applyHistoryFilters(history) {
    let filtered = [...history];
    
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–ø–∞—Å–∞
    const searchQuery = document.getElementById('historySearchInput').value.trim().toLowerCase();
    if (searchQuery) {
        filtered = filtered.filter(item => 
            item.compass.toLowerCase().includes(searchQuery)
        );
        
        // –ü–†–ò–û–†–ò–¢–ï–¢: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º!
        filtered.sort((a, b) => {
            const aLower = a.compass.toLowerCase();
            const bLower = b.compass.toLowerCase();
            const aExact = aLower === searchQuery;
            const bExact = bLower === searchQuery;
            
            // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ
            if (aExact && !bExact) return -1;
            if (!aExact && bExact) return 1;
            
            // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - –≤—ã—à–µ
            const aStarts = aLower.startsWith(searchQuery);
            const bStarts = bLower.startsWith(searchQuery);
            
            if (aStarts && !bStarts) return -1;
            if (!aStarts && bStarts) return 1;
            
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ - –æ–±—ã—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            return compareCompassNames(a.compass, b.compass);
        });
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const statusFilter = document.getElementById('historyFilterStatus').value;
    if (statusFilter === 'success') {
        filtered = filtered.filter(item => item.isValid);
    } else if (statusFilter === 'failed') {
        filtered = filtered.filter(item => !item.isValid);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const deviceTypeFilter = document.getElementById('historyFilterDeviceType').value;
    if (deviceTypeFilter && deviceTypeFilter !== 'all') {
        filtered = filtered.filter(item => (item.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') === deviceTypeFilter);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    const dateFrom = document.getElementById('historyFilterDateFrom').value;
    const dateTo = document.getElementById('historyFilterDateTo').value;
    
    if (dateFrom) {
        const fromTimestamp = new Date(dateFrom).getTime();
        filtered = filtered.filter(item => item.timestamp >= fromTimestamp);
    }
    
    if (dateTo) {
        const toTimestamp = new Date(dateTo).setHours(23, 59, 59, 999);
        filtered = filtered.filter(item => item.timestamp <= toTimestamp);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–æ–∏—Å–∫–∞)
    if (!searchQuery) {
        const sortBy = document.getElementById('historySort').value;
        
        switch (sortBy) {
            case 'date-desc':
                filtered.sort((a, b) => b.timestamp - a.timestamp);
                break;
            case 'date-asc':
                filtered.sort((a, b) => a.timestamp - b.timestamp);
                break;
            case 'name-asc':
                filtered.sort((a, b) => compareCompassNames(a.compass, b.compass));
                break;
            case 'name-desc':
                filtered.sort((a, b) => compareCompassNames(b.compass, a.compass));
                break;
            case 'device-asc':
                filtered.sort((a, b) => (a.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').localeCompare(b.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'ru'));
                break;
            case 'device-desc':
                filtered.sort((a, b) => (b.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').localeCompare(a.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'ru'));
                break;
        }
    }
    
    return filtered;
}

// –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–º–ø–∞—Å–æ–≤ (—á–∏—Å–ª–æ–≤–∞—è)
function compareCompassNames(a, b) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫
    const numA = parseInt(a.match(/\d+/)?.[0] || '0');
    const numB = parseInt(b.match(/\d+/)?.[0] || '0');
    
    // –ï—Å–ª–∏ —á–∏—Å–ª–∞ —Ä–∞–∑–Ω—ã–µ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª—É
    if (numA !== numB) {
        return numA - numB;
    }
    
    // –ï—Å–ª–∏ —á–∏—Å–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return a.localeCompare(b, 'ru');
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
async function clearHistory() {
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        return;
    }
    
    try {
        await window.go.desktop.App.ClearHistory();
        await loadHistory();
        showToast('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏', 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
document.addEventListener('DOMContentLoaded', () => {
    const refreshBtn = document.getElementById('refreshHistoryBtn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', async () => {
            showToast('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...', 'info');
            await loadHistory();
        });
    }
    
    const clearBtn = document.getElementById('clearHistoryBtn');
    if (clearBtn) {
        clearBtn.addEventListener('click', clearHistory);
    }
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
    const applyFiltersBtn = document.getElementById('applyHistoryFilters');
    if (applyFiltersBtn) {
        applyFiltersBtn.addEventListener('click', () => {
            if (state.historyDataFull) {
                displayHistory(state.historyDataFull, true);
                showToast('üîç –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã', 'success');
            } else {
                showToast('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏', 'warning');
            }
        });
    }
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
    const resetFiltersBtn = document.getElementById('resetHistoryFilters');
    if (resetFiltersBtn) {
        resetFiltersBtn.addEventListener('click', () => {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
            document.getElementById('historySearchInput').value = '';
            document.getElementById('historyFilterStatus').value = 'all';
            document.getElementById('historyFilterDeviceType').value = 'all';
            document.getElementById('historyFilterDateFrom').value = '';
            document.getElementById('historyFilterDateTo').value = '';
            document.getElementById('historySort').value = 'date-desc';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if (state.historyDataFull) {
                displayHistory(state.historyDataFull, false);
                showToast('‚ôªÔ∏è –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
            }
        });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const historyNav = document.querySelector('[data-page="history"]');
    if (historyNav) {
        historyNav.addEventListener('click', () => {
            setTimeout(() => {
                // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                if (state.historyDataFull && state.historyDataFull.length > 0) {
                    displayHistory(state.historyDataFull, true);  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
                } else {
                    loadHistory();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
                }
            }, 100);
        });
    }
});

// ============================================================================
// –†–ï–î–ê–ö–¢–û–† –§–ê–ô–õ–û–í
// ============================================================================

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function loadEditorSettings() {
    const saved = localStorage.getItem('editorSettings');
    if (saved) {
        try {
            const settings = JSON.parse(saved);
            if (settings.lastDirectory) {
                document.getElementById('editorDirInput').value = settings.lastDirectory;
            }
            if (settings.textToRemove) {
                document.getElementById('editorTextInput').value = settings.textToRemove;
            }
            if (settings.recursive !== undefined) {
                document.getElementById('editorRecursive').checked = settings.recursive;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', e);
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function saveEditorSettings() {
    const settings = {
        lastDirectory: document.getElementById('editorDirInput').value,
        textToRemove: document.getElementById('editorTextInput').value,
        recursive: document.getElementById('editorRecursive').checked
    };
    localStorage.setItem('editorSettings', JSON.stringify(settings));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    loadEditorSettings();
    
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const selectEditorBtn = document.getElementById('selectEditorDirBtn');
    if (selectEditorBtn) {
        selectEditorBtn.addEventListener('click', async () => {
            if (!isWailsMode()) {
                showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
                return;
            }
            
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Go –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Wails binding
                const result = await window.go.desktop.App.SelectDirectory('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤');
                
                if (result) {
                    document.getElementById('editorDirInput').value = result;
                    saveEditorSettings();
                    showToast('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞', 'success');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
                showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message || error}`, 'error');
            }
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const previewBtn = document.getElementById('previewRenameBtn');
    if (previewBtn) {
        previewBtn.addEventListener('click', () => previewRename());
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const executeBtn = document.getElementById('executeRenameBtn');
    if (executeBtn) {
        executeBtn.addEventListener('click', () => executeRename());
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    ['editorDirInput', 'editorTextInput', 'editorRecursive'].forEach(id => {
        const el = document.getElementById(id);
        if (el) {
            el.addEventListener('change', saveEditorSettings);
        }
    });
});

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
async function previewRename() {
    const directory = document.getElementById('editorDirInput').value.trim();
    const textToRemove = document.getElementById('editorTextInput').value.trim();
    const recursive = document.getElementById('editorRecursive').checked;
    
    if (!directory) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', 'warning');
        return;
    }
    
    if (!textToRemove) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    showLoading(true, '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...');
    
    try {
        const stats = await window.go.desktop.App.PreviewRename(directory, textToRemove, recursive);
        displayRenameResults(stats, true);
        
        if (stats.total === 0) {
            showToast('‚ÑπÔ∏è –§–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'info');
        } else {
            showToast(`üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${stats.total}`, 'info');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
async function executeRename() {
    const directory = document.getElementById('editorDirInput').value.trim();
    const textToRemove = document.getElementById('editorTextInput').value.trim();
    const recursive = document.getElementById('editorRecursive').checked;
    
    if (!directory) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', 'warning');
        return;
    }
    
    if (!textToRemove) {
        showToast('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }
    
    if (!isWailsMode()) {
        showToast('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Desktop —Ä–µ–∂–∏–º–µ', 'warning');
        return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const count = await window.go.desktop.App.GetFilesCount(directory, textToRemove, recursive);
    if (count === 0) {
        showToast('‚ÑπÔ∏è –§–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'info');
        return;
    }
    
    if (!confirm(`–ë—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ ${count} —Ñ–∞–π–ª–æ–≤.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
        return;
    }
    
    showLoading(true, '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    
    try {
        const stats = await window.go.desktop.App.RemoveTextFromFilenames(directory, textToRemove, recursive);
        displayRenameResults(stats, false);
        
        if (stats.success > 0) {
            showToast(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: ${stats.success} —Ñ–∞–π–ª–æ–≤`, 'success');
        }
        if (stats.failed > 0) {
            showToast(`‚ö†Ô∏è –û—à–∏–±–æ–∫: ${stats.failed}`, 'warning');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:', error);
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayRenameResults(stats, isPreview) {
    const resultsDiv = document.getElementById('renameResults');
    resultsDiv.style.display = 'block';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('renameSuccess').textContent = stats.success;
    document.getElementById('renameFailed').textContent = stats.failed;
    document.getElementById('renameTotal').textContent = stats.total;
    
    // –¢–∞–±–ª–∏—Ü–∞
    const tbody = document.getElementById('renameResultsBody');
    
    if (!stats.results || stats.results.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="4" class="empty-state">
                    <span class="material-icons">search_off</span>
                    –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = stats.results.map((result, index) => {
        const statusBadge = result.success 
            ? '<span class="badge success">‚úì –£—Å–ø–µ—à–Ω–æ</span>'
            : `<span class="badge error">‚úó ${result.error || '–û—à–∏–±–∫–∞'}</span>`;
        
        const rowStyle = result.success ? '' : 'background: rgba(239, 68, 68, 0.1);';
        
        return `
            <tr style="${rowStyle}">
                <td><strong>${index + 1}</strong></td>
                <td><code>${result.oldName}</code></td>
                <td><code>${result.newName}</code></td>
                <td>${statusBadge}</td>
            </tr>
        `;
    }).join('');
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
}


