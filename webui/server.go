package webui

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"

	"compass_analyzer/analyzer"
	"compass_analyzer/models"
	"compass_analyzer/parser"
)

// AnalysisRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
type AnalysisRequest struct {
	FolderPath string                   `json:"folderPath"`
	Config     *analyzer.AnalysisConfig `json:"config,omitempty"` // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
}

// AnalysisResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
type AnalysisResponse struct {
	Success   bool          `json:"success"`
	IsValid   bool          `json:"isValid"`
	Compass   string        `json:"compass"`
	Turns     []models.Turn `json:"turns"`
	AllAngles []float64     `json:"allAngles"`
	Segments  []SegmentInfo `json:"segments"`
	Errors    []string      `json:"errors"`
	Log       string        `json:"log"`
}

// SegmentInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
type SegmentInfo struct {
	StartIndex int     `json:"startIndex"`
	EndIndex   int     `json:"endIndex"`
	AvgAngle   float64 `json:"avgAngle"`
	Length     int     `json:"length"`
}

// Server –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
type Server struct {
	port string
}

// NewServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
func NewServer(port string) *Server {
	return &Server{port: port}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
func (s *Server) Start() error {
	// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
	fs := http.FileServer(http.Dir("webui/static"))
	http.Handle("/", fs)

	// API endpoints
	http.HandleFunc("/api/analyze", s.handleAnalyze)
	http.HandleFunc("/api/batch-analyze", s.handleBatchAnalyze)
	http.HandleFunc("/api/batch-analyze-stream", s.handleBatchAnalyzeStream)
	http.HandleFunc("/api/config", s.handleConfig)

	addr := ":" + s.port
	fmt.Printf("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n")
	fmt.Printf("‚ïë      Compass Analyzer - Web Interface Started       ‚ïë\n")
	fmt.Printf("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")
	fmt.Printf("\nüåê –û—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost%s\n\n", addr)

	return http.ListenAndServe(addr, nil)
}

// handleAnalyze –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–∞—Å–∞
func (s *Server) handleAnalyze(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req AnalysisRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
	config := analyzer.DefaultConfig()
	if req.Config != nil {
		config = *req.Config
	}

	response := s.analyzeFolder(req.FolderPath, config)

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// handleBatchAnalyze –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞—Å–æ–≤
func (s *Server) handleBatchAnalyze(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req struct {
		DataDir string                   `json:"dataDir"`
		Config  *analyzer.AnalysisConfig `json:"config,omitempty"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
	config := analyzer.DefaultConfig()
	if req.Config != nil {
		config = *req.Config
	}

	folders, err := os.ReadDir(req.DataDir)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	var responses []AnalysisResponse

	for _, folder := range folders {
		if !folder.IsDir() {
			continue
		}

		folderPath := filepath.Join(req.DataDir, folder.Name())
		response := s.analyzeFolder(folderPath, config)
		responses = append(responses, response)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(responses)
}

// handleBatchAnalyzeStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func (s *Server) handleBatchAnalyzeStream(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req struct {
		DataDir string                   `json:"dataDir"`
		Config  *analyzer.AnalysisConfig `json:"config,omitempty"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
	config := analyzer.DefaultConfig()
	if req.Config != nil {
		config = *req.Config
	}

	folders, err := os.ReadDir(req.DataDir)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫
	totalFolders := 0
	for _, folder := range folders {
		if folder.IsDir() {
			totalFolders++
		}
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE (Server-Sent Events)
	w.Header().Set("Content-Type", "text/event-stream")
	w.Header().Set("Cache-Control", "no-cache")
	w.Header().Set("Connection", "keep-alive")
	w.Header().Set("Access-Control-Allow-Origin", "*")

	flusher, ok := w.(http.Flusher)
	if !ok {
		http.Error(w, "Streaming not supported", http.StatusInternalServerError)
		return
	}

	log.Printf("üì¶ –ü–æ—Ç–æ–∫–æ–≤—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ %d –ø–∞–ø–æ–∫ –∏–∑ %s", totalFolders, req.DataDir)

	processed := 0

	for _, folder := range folders {
		if !folder.IsDir() {
			continue
		}

		processed++
		folderPath := filepath.Join(req.DataDir, folder.Name())

		log.Printf("‚è≥ [%d/%d] –ê–Ω–∞–ª–∏–∑: %s", processed, totalFolders, folder.Name())

		response := s.analyzeFolder(folderPath, config)

		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
		progressMsg := map[string]interface{}{
			"type":      "progress",
			"current":   processed,
			"total":     totalFolders,
			"compass":   folder.Name(),
			"completed": false,
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
		data, _ := json.Marshal(progressMsg)
		fmt.Fprintf(w, "data: %s\n\n", data)
		flusher.Flush()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		resultMsg := map[string]interface{}{
			"type":   "result",
			"result": response,
		}

		data, _ = json.Marshal(resultMsg)
		fmt.Fprintf(w, "data: %s\n\n", data)
		flusher.Flush()
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	completeMsg := map[string]interface{}{
		"type":      "complete",
		"total":     totalFolders,
		"completed": true,
	}

	data, _ := json.Marshal(completeMsg)
	fmt.Fprintf(w, "data: %s\n\n", data)
	flusher.Flush()

	log.Printf("‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: %d –ø–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", totalFolders)
}

// analyzeFolder –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞—Å–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
func (s *Server) analyzeFolder(folderPath string, config analyzer.AnalysisConfig) AnalysisResponse {
	response := AnalysisResponse{
		Compass: filepath.Base(folderPath),
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–∞
	csvPath := filepath.Join(folderPath, "SB_CMPS.csv")
	if _, err := os.Stat(csvPath); os.IsNotExist(err) {
		response.Success = false
		response.Errors = []string{fmt.Sprintf("–§–∞–π–ª SB_CMPS.csv –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ %s", folderPath)}
		return response
	}

	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	data, err := parser.ReadCSVFile(csvPath)
	if err != nil {
		response.Success = false
		response.Errors = []string{fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: %v", err)}
		return response
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≥–ª—ã
	angles := make([]float64, len(data))
	for i, d := range data {
		angles[i] = d.Angle
	}
	response.AllAngles = angles

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª
	logFile, err := os.CreateTemp("", "compass_log_*.txt")
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª: %v", err)
		logFile = nil
	}
	defer func() {
		if logFile != nil {
			logFile.Close()
			os.Remove(logFile.Name())
		}
	}()

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
	isValid, turns := analyzer.AnalyzeCompassData(angles, config, logFile)

	response.Success = true
	response.IsValid = isValid
	response.Turns = turns

	// –ß–∏—Ç–∞–µ–º –ª–æ–≥
	if logFile != nil {
		logFile.Seek(0, 0)
		logBytes, _ := io.ReadAll(logFile)
		response.Log = string(logBytes)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö (–¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
	// –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç
	segments := analyzer.GetSegments(angles, config)
	for _, seg := range segments {
		response.Segments = append(response.Segments, SegmentInfo{
			StartIndex: seg.StartIndex,
			EndIndex:   seg.EndIndex,
			AvgAngle:   seg.AvgAngle,
			Length:     len(seg.AllAngles),
		})
	}

	if !isValid {
		response.Errors = []string{
			fmt.Sprintf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –Ω–∞ ~90 –≥—Ä–∞–¥—É—Å–æ–≤: %d (–æ–∂–∏–¥–∞–ª–æ—Å—å 4)", len(turns)),
		}
	}

	return response
}

// handleConfig –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (s *Server) handleConfig(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	switch r.Method {
	case http.MethodGet:
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		config := analyzer.DefaultConfig()
		json.NewEncoder(w).Encode(config)

	case http.MethodPost:
		// –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
		var config analyzer.AnalysisConfig
		if err := json.NewDecoder(r.Body).Decode(&config); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		// –í–∞–ª–∏–¥–∞—Ü–∏—è
		if config.StabilityThreshold < 0 || config.StabilityThreshold > 20 {
			http.Error(w, "StabilityThreshold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 20", http.StatusBadRequest)
			return
		}
		if config.TurnTolerance < 0 || config.TurnTolerance > 30 {
			http.Error(w, "TurnTolerance –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 30", http.StatusBadRequest)
			return
		}
		if config.MinStableLen < 1 || config.MinStableLen > 10 {
			http.Error(w, "MinStableLen –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10", http.StatusBadRequest)
			return
		}
		if config.MaxOutliers < 0 || config.MaxOutliers > 10 {
			http.Error(w, "MaxOutliers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10", http.StatusBadRequest)
			return
		}
		if config.SumTolerance < 0 || config.SumTolerance > 50 {
			http.Error(w, "SumTolerance –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 50", http.StatusBadRequest)
			return
		}

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
		json.NewEncoder(w).Encode(config)

	default:
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
	}
}

// StartWebUI –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func StartWebUI(port string) {
	server := NewServer(port)
	if err := server.Start(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
